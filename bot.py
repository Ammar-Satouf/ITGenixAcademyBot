import threading
import time
import requests
import os
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# ุฅุนุฏุงุฏ Flask
app = Flask(name)

# ุจูุงูุงุช ููููุฉ ููุณูุฉ ุงูุฃููู
resources = {
    "1": {
        "1": {
            "practical": {
                "programming1": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุจุฑูุฌุฉ 1: https://drive.google.com/programming1_lectures",
                    "exams": "ุฃุณุฆูุฉ ุจุฑูุฌุฉ 1: https://drive.google.com/programming1_exams",
                    "notes": "ููุงุญุธุงุช ุจุฑูุฌุฉ 1: ุฑูุฒ ุนูู ุฃุณุงุณูุงุช C++ ูุงูุฎูุงุฑุฒููุงุช."
                },
                "analysis1": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุชุญููู 1: https://drive.google.com/analysis1_lectures",
                    "exams": "ุฃุณุฆูุฉ ุชุญููู 1: https://drive.google.com/analysis1_exams",
                    "notes": "ููุงุญุธุงุช ุชุญููู 1: ุฑุงุฌุน ุงูููุงูุงุช ูุงูุชูุงุถู."
                },
                "linear_algebra": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุฌุจุฑ ูุงุฎุทู: https://drive.google.com/linear_algebra_lectures",
                    "exams": "ุฃุณุฆูุฉ ุฌุจุฑ ูุงุฎุทู: https://drive.google.com/linear_algebra_exams",
                    "notes": "ููุงุญุธุงุช ุฌุจุฑ ูุงุฎุทู: ุฑูุฒ ุนูู ุงููุตูููุงุช ูุงููุชุฌูุงุช."
                },
                "computer_principles": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ูุจุงุฏุฆ ุนูู ุงูุญุงุณูุจ: https://drive.google.com/computer_principles_lectures",
                    "exams": "ุฃุณุฆูุฉ ูุจุงุฏุฆ ุนูู ุงูุญุงุณูุจ: https://drive.google.com/computer_principles_exams",
                    "notes": "ููุงุญุธุงุช ูุจุงุฏุฆ ุนูู ุงูุญุงุณูุจ: ููู ุงููุนุงูุฌุงุช ูุงูููุฏุณุฉ."
                },
                "electrophysics": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุงูููุฒูุงุก ุงูููุฑุจุงุฆูุฉ: https://drive.google.com/electrophysics_lectures",
                    "exams": "ุฃุณุฆูุฉ ุงูููุฒูุงุก ุงูููุฑุจุงุฆูุฉ: https://drive.google.com/electrophysics_exams",
                    "notes": "ููุงุญุธุงุช ุงูููุฒูุงุก ุงูููุฑุจุงุฆูุฉ: ุฑุงุฌุน ููุงููู ุฃูู ูููุฑุดูู."
                },
            },
            "theoretical": {
                "arabic": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุงููุบุฉ ุงูุนุฑุจูุฉ: https://drive.google.com/arabic_lectures",
                    "exams": "ุฃุณุฆูุฉ ุงููุบุฉ ุงูุนุฑุจูุฉ: https://drive.google.com/arabic_exams",
                    "notes": "ููุงุญุธุงุช ุงููุบุฉ ุงูุนุฑุจูุฉ: ุฑูุฒ ุนูู ุงูููุงุนุฏ ูุงููุญู."
                },
                "english1": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ 1: https://drive.google.com/english1_lectures",
                    "exams": "ุฃุณุฆูุฉ ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ 1: https://drive.google.com/english1_exams",
                    "notes": "ููุงุญุธุงุช ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ 1: ูุงุฑุณ ุงููุฑุงุกุฉ ูุงููุชุงุจุฉ."
                },
            },
        },
        "2": {
            "practical": {
                "programming2": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุจุฑูุฌุฉ 2: https://drive.google.com/programming2_lectures",
                    "exams": "ุฃุณุฆูุฉ ุจุฑูุฌุฉ 2: https://drive.google.com/programming2_exams",
                    "notes": "ููุงุญุธุงุช ุจุฑูุฌุฉ 2: ุฑูุฒ ุนูู ุงูุจุฑูุฌุฉ ุงููุงุฆููุฉ."
                },
                "analysis2": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุชุญููู 2: https://drive.google.com/analysis2_lectures",
                    "exams": "ุฃุณุฆูุฉ ุชุญููู 2: https://drive.google.com/analysis2_exams",
                    "notes": "ููุงุญุธุงุช ุชุญููู 2: ุฑุงุฌุน ุงูุชูุงูู ูุงููุนุงุฏูุงุช ุงูุชูุงุถููุฉ."
                },
                "linear_algebra2": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุฌุจุฑ ุฎุทู: https://drive.google.com/linear_algebra2_lectures",
                    "exams": "ุฃุณุฆูุฉ ุฌุจุฑ ุฎุทู: https://drive.google.com/linear_algebra2_exams",
                    "notes": "ููุงุญุธุงุช ุฌุจุฑ ุฎุทู: ุฑูุฒ ุนูู ุงูููู ุงูุฐุงุชูุฉ."
                },
                "semiconductors": {"lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ููุฒูุงุก ุฃูุตุงู ููุงูู: https://drive.google.com/semiconductors_lectures",
                    "exams": "ุฃุณุฆูุฉ ููุฒูุงุก ุฃูุตุงู ููุงูู: https://drive.google.com/semiconductors_exams",
                    "notes": "ููุงุญุธุงุช ููุฒูุงุก ุฃูุตุงู ููุงูู: ููู ุงูุชุฑุงูุฒุณุชูุฑุงุช."
                },
            },
            "theoretical": {
                "english2": {
                    "lectures": "ุฑุงุจุท ูุญุงุถุฑุงุช ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ 2: https://drive.google.com/english2_lectures",
                    "exams": "ุฃุณุฆูุฉ ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ 2: https://drive.google.com/english2_exams",
                    "notes": "ููุงุญุธุงุช ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ 2: ุฑูุฒ ุนูู ุงููุญุงุฏุซุฉ."
                },
            },
        },
    },
}

# ุฃูุงูุฑ ุงูุจูุช
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        "ูุฑุญุจูุง! ุฃูุง ุจูุช ุฏุฑุงุณุฉ ุงูููุฏุณุฉ ุงููุนูููุงุชูุฉ ๐ฅ๏ธ\n"
        "ุงุณุชุฎุฏู ุงูุฃูุงูุฑ ุงูุชุงููุฉ:\n"
        "/lectures [year] [semester] [type] - ููุญุงุถุฑุงุช (ูุซู /lectures 1 1 practical)\n"
        "/exams [year] [semester] [type] - ูุฃุณุฆูุฉ ุงูุงูุชุญุงูุงุช\n"
        "/notes [year] [semester] [type] - ูููุงุญุธุงุช ูุงูุฉ\n"
        "ุงุณุชุจุฏู [year] ุจู 1ุ [semester] ุจู 1 ุฃู 2ุ ู[type] ุจู practical ุฃู theoretical\n"
        "/help - ูุนุฑุถ ุงูุชุนูููุงุช"
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_message = (
        "ุชุนูููุงุช ุงูุงุณุชุฎุฏุงู:\n"
        "ุงุณุชุฎุฏู ุงูุฃูุงูุฑ ูุน ุงูุณูุฉ (1)ุ ุงููุตู (1 ุฃู 2)ุ ูููุน ุงููุงุฏุฉ (practical ุฃู theoretical).\n"
        "ูุซุงู:\n"
        "/lectures 1 1 practical - ููุญุงุถุฑุงุช ุงูููุงุฏ ุงูุนูููุฉ ูุงููุธุฑูุฉ\n"
        "/exams 1 2 theoretical - ูุฃุณุฆูุฉ ุงูููุงุฏ ุงููุธุฑูุฉ\n"
        "/notes 1 1 practical - ูููุงุญุธุงุช ุงูููุงุฏ ุงูุนูููุฉ ูุงููุธุฑูุฉ"
    )
    await update.message.reply_text(help_message)

async def lectures(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 3:
        await update.message.reply_text("ูุฑุฌู ุฅุฏุฎุงู ุงูุณูุฉุ ุงููุตูุ ูููุน ุงููุงุฏุฉ. ูุซุงู: /lectures 1 1 practical")
        return
    year, semester, subject_type = context.args[0], context.args[1], context.args[2]
    if year in resources and semester in resources[year] and subject_type in resources[year][semester]:
        response = "ูุญุงุถุฑุงุช:\n"
        for subject, data in resources[year][semester][subject_type].items():
            response += f"- {subject}: {data['lectures']}\n"
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("ุฎุทุฃ: ุชุญูู ูู ุงูุณูุฉ (1)ุ ุงููุตู (1 ุฃู 2)ุ ุฃู ููุน ุงููุงุฏุฉ (practical ุฃู theoretical)")

async def exams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 3:
        await update.message.reply_text("ูุฑุฌู ุฅุฏุฎุงู ุงูุณูุฉุ ุงููุตูุ ูููุน ุงููุงุฏุฉ. ูุซุงู: /exams 1 1 practical")
        return
    year, semester, subject_type = context.args[0], context.args[1], context.args[2]
    if year in resources and semester in resources[year] and subject_type in resources[year][semester]:
        response = "ุฃุณุฆูุฉ ุงูุงูุชุญุงูุงุช:\n"
        for subject, data in resources[year][semester][subject_type].items():
            response += f"- {subject}: {data['exams']}\n"
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("ุฎุทุฃ: ุชุญูู ูู ุงูุณูุฉ (1)ุ ุงููุตู (1 ุฃู 2)ุ ุฃู ููุน ุงููุงุฏุฉ (practical ุฃู theoretical)")

async def notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 3:
        await update.message.reply_text("ูุฑุฌู ุฅุฏุฎุงู ุงูุณูุฉุ ุงููุตูุ ูููุน ุงููุงุฏุฉ. ูุซุงู: /notes 1 1 practical")
        return
    year, semester, subject_type = context.args[0], context.args[1], context.args[2]
    if year in resources and semester in resources[year] and subject_type in resources[year][semester]:
        response = "ููุงุญุธุงุช ูุงูุฉ:\n"
        for subject, data in resources[year][semester][subject_type].items():
            response += f"- {subject}: {data['notes']}\n"
        await update.message.reply_text(response)
    else:
        await update.message.reply_text("ุฎุทุฃ: ุชุญูู ูู ุงูุณูุฉ (1)ุ ุงููุตู (1 ุฃู 2)ุ ุฃู ููุน ุงููุงุฏุฉ (practical ุฃู theoretical)")

# ุฅุนุฏุงุฏ Webhook ูุชููู ุชุญุฏูุซุงุช ุชูุบุฑุงู
application = None
@app.route('/webhook', methods=['POST'])
async def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    await application.process_update(update)
    return 'OK', 200

# ูุธููุฉ keep alive
def keep_alive():
    while True:
        try:
            # ุงุณุชุจุฏู ุจู URL ุงูุฎุงุต ุจุฎุงุฏูู ุจุนุฏ ุงููุดุฑ
            requests.get("https://your-app-name.onrender.com/ping")
            print("Keep alive ping sent")
        except Exception as e:
            print(f"Keep alive error: {e}")
        time.sleep(600)  # ุฅุฑุณุงู ุทูุจ ูู 10 ุฏูุงุฆู

# ููุทุฉ ููุงูุฉ ping ูู keep alive
@app.route('/ping', methods=['GET'])
def ping():
    return 'Bot is alive!', 200

def main():
    global application
    # ูุฑุงุกุฉ ุงูู Token ูู ูุชุบูุฑ ุจูุฆู
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู BOT_TOKEN ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ")
        return

    application = Application.builder().token(bot_token).build()

    # ุฅุถุงูุฉ ุงูุฃูุงูุฑ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("lectures", lectures))
    application.add_handler(CommandHandler("exams", exams))
    application.add_handler(CommandHandler("notes", notes))

    # ุจุฏุก ุฎูุท keep alive
    threading.Thread(target=keep_alive, daemon=True).start()

    # ุชุดุบูู Flask
    print("ุงูุจูุช ูุนูู...")
    app.run(host='0.0.0.0', port=8443)

if name == 'main':
    main()
